version: '3.8'

services:
  # フロントエンドサービス
  frontend:
    build:
      context: ./frontend  # docker-compose.ymlと同じ階層にあるfrontendディレクトリを指定
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}

  # バックエンドサービス
  backend:
    build:
      context: ./backend #docker-compose.ymlと同じ階層にあるbackendディレクトリを指定
      dockerfile: Dockerfile
    env_file:
      - ./.env
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_data:/app/output
    depends_on:
      - db
      - redis
    command: ["/app/start.sh"]
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/registry_system
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REGISTRY_USERNAME=${REGISTRY_USERNAME}
      - REGISTRY_PASSWORD=${REGISTRY_PASSWORD}
      - OUTPUT_DIR=/app/output
      - KEN_ALL_CSV_PATH=/app/app/data/x-ken-all.csv
      - REDIS_URL=redis://redis:6379/0
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/google-credentials.json

  # データベースサービス
  db:
    image: postgres:14-alpine
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres

  # Redisサービス (Celery用)
  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # フロントエンドサービスはコメントアウト
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: ../docker/frontend/Dockerfile
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:8000/api/v1
  #   depends_on:
  #     - backend

volumes:
  postgres_data:
  redis_data:
  backend_data:
  node_modules: